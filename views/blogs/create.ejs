<!DOCTYPE html>
<html lang="en">
<%- include('../partials/head.ejs') %>

  <body>
    <%- include('../partials/nav.ejs') %>

      <div class="create-blog content">
        <h1 class="centeredTitle">Upload a new test</h1>
        <form action="/upload" enctype="multipart/form-data">
          <div id="user-data" data-id="<%= user.id %>" data-email="<%= user.email %>">
            Your test will be saved based on your ID that associated with your
            email <%= user.email %>, so that other users cannot delete it.
          </div>
          <label for="title">Test title:</label>
          <input type="text" id="title" name="title" required />
          <label for="snippet">Test snippet:</label>
          <input type="text" id="snippet" name="snippet" required />
          <label for="body">Test presentation:</label>
          <textarea id="body" name="body"
            required>Test presentation: &#13;&#10;Test type: &#13;&#10;Scoring rules:  &#13;&#10;Duration: &#13;&#10;Getting the results :  </textarea>
          <label for="testurl">Test URL (copy this url to access to the test) : </label>
          <input type="text" id="testurl" name="testurl" />
          <label for="file">Upload File:</label>
          <input type="file" id="file" name="file" required />
          
          <button type="submit">Submit</button>
        </form>
      </div>

      <script>
        const form = document.querySelector("form");
        const blogError = document.querySelector(".blog.error");

        form.addEventListener("submit", async (e) => {
          e.preventDefault();

          console.log(form)
          const formData = new FormData(form);
          console.log(formData.get('file'))
          const fileData = new FormData(); // Création d'un FormData spécifique pour le fichier
          // Extrayez uniquement le fichier et préparez un FormData dédié
          fileData.append('file', formData.get('file'));

          // get the text-form values
          const title = form.title.value;
          const snippet = form.snippet.value;
          const body = form.body.value;

          // get the path 
          const fpath = form.file.value;

          const userElement = document.getElementById("user-data");
          const userData = {
            id: userElement.getAttribute("data-id"),
            email: userElement.getAttribute("data-email"),
          };

          const creator = userData.id;
          console.log("user: ", userData.email);

          const blogData = {
            title,
            creator,
            snippet,
            body,
          };


          try {
            // Envoi du fichier
            const fileResponse = await fetch('/upload', {
              method: 'POST',
              body: fileData,
            });
            console.log(fileResponse)
            if (fileResponse.ok) {
              console.log("Upload du fichier réussi");
            } else {
              console.error("Échec de l'upload du fichier");
            }
          } catch (error) {
            console.error("Erreur lors de l'envoi du fichier :", error);
          }


          try {
            const res = await fetch("/blogs", {
              method: "POST",
              body: JSON.stringify(blogData),
              headers: { "content-Type": "application/json" },
            }).then((result) => {
              if (result) {
                location.assign("/");
              }
            });
          } catch (error) {
            console.log(error);
          }
        });

        function generateUniqueCode() {
          const array = new Uint8Array(4);
          window.crypto.getRandomValues(array);
          return Array.from(array, byte => byte.toString(4).padStart(2, '0')).join('');
        }

        // Appel de la fonction et affichage du code unique dans la console
        const uniqueCode = generateUniqueCode();
        console.log(uniqueCode);

      </script>

      <%- include('../partials/footer.ejs') %>
  </body>

</html>